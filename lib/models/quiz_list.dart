import 'package:flutter/foundation.dart';
import './quiz.dart';

class QuizList with ChangeNotifier {
  final List<Quiz> _items = [
    Quiz(
      id: 'q1',
      cid: 'c1',
      level: 1,
      question: "10\u{207B}\u{2076}",//10^-6
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.basic,
      
    ),
    Quiz(
      id: 'q2',
      cid: 'c1',
      level: 1,
      question: "9 \u{00F7} 3",//mul
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q3',
      cid: 'c1',
      level: 1,
      question: '4 \u{00D7} (2 + 3)',//div
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q4',
      cid: 'c1',
      level: 1,
      question: '4 \u33D2 (2 + 3)',//log
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q5',
      cid: 'c1',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q6',
      cid: 'c1',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q7',
      cid: 'c1',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q8',
      cid: 'c1',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q9',
      cid: 'c1',
      level: 1,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q10',
      cid: 'c1',
      level: 1,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q11',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q12',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q13',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q14',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q15',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q16',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q17',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q18',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q19',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),
    Quiz(
      id: 'q20',
      cid: 'c1',
      level: 2,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.basic,
    ),

    Quiz(
      id: 'q51',
      cid: 'c2',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q52',
      cid: 'c2',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q53',
      cid: 'c2',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q54',
      cid: 'c2',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q55',
      cid: 'c2',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q56',
      cid: 'c2',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q57',
      cid: 'c2',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q58',
      cid: 'c2',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q59',
      cid: 'c2',
      level: 1,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.intermediate,
    ),
    Quiz(
      id: 'q60',
      cid: 'c2',
      level: 1,
      question: '6 x 2 x 3',
      answers: ['37', '32', '36'],
      rightAnser: '36',
      complexity: Complexity.intermediate,
    ),

    Quiz(
      id: 'q51',
      cid: 'c3',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q52',
      cid: 'c3',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q53',
      cid: 'c3',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q54',
      cid: 'c3',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q55',
      cid: 'c3',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q56',
      cid: 'c3',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q57',
      cid: 'c3',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q58',
      cid: 'c3',
      level: 1,
      question: '4 x (2 + 3)',
      answers: ['24', '11', '14'],
      rightAnser: '24',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q59',
      cid: 'c3',
      level: 1,
      question: 'adv',
      answers: ['a1', 'a2', 'a3'],
      rightAnser: '36',
      complexity: Complexity.advanced,
    ),
    Quiz(
      id: 'q60',
      cid: 'c3',
      level: 1,
      question: 'adv',
      answers: ['a1', 'a2', 'a3'],
      rightAnser: '36',
      complexity: Complexity.advanced,
    ),
  ];
  List<Quiz> get items {
    return [..._items];
  }

  List<Quiz> findByCid(String id) {
    return _items.where((element) => element.cid == id).toList();
  }

  List<Quiz> findByLevel(int level, Complexity complexity) {
    return _items
        .where((element) =>
            element.level == level && element.complexity == complexity)
        .toList();
  }
}
